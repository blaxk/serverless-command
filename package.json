{
	"name": "serverless-command",
	"displayName": "Serverless command",
	"description": "Serverless Framework can be easily executed in VSCode, and using TreeView helps intuitive and convenient development.",
	"icon": "resources/icon.png",
	"version": "1.5.6",
	"publisher": "blaxk",
	"author": "blaxk",
	"engines": {
		"vscode": "^1.58.1"
	},
	"license": "MIT",
	"repository": {
		"type": "git",
		"url": "https://github.com/blaxk/serverless-command"
	},
	"bugs": {
		"url": "https://github.com/blaxk/serverless-command/issues"
	},
	"categories": [
		"Other"
	],
	"keywords": [
		"serverless",
		"aws",
		"lambda",
		"cloudwatch",
		"cloudwatchlogs"
	],
	"activationEvents": [
		"onView:serverlessOutline"
	],
	"main": "./build/extension.js",
	"contributes": {
		"viewsContainers": {
			"activitybar": [
				{
					"id": "serverless-explorer",
					"title": "Serverless-command",
					"icon": "resources/tab-icon.svg"
				}
			]
		},
		"views": {
			"serverless-explorer": [
				{
					"id": "serverlessOutline",
					"name": "services"
				},
				{
					"id": "serverlessLogsOutline",
					"name": "cloud watch logs"
				}
			]
		},
		"commands": [
			{
				"command": "serverless.refreshTreeHandler",
				"title": "Refresh tree",
				"icon": {
					"light": "resources/icons/light/refresh.svg",
					"dark": "resources/icons/dark/refresh.svg"
				}
			},
			{
				"command": "serverless.package",
				"title": "Package service",
				"category": "Serverless"
			},
			{
				"command": "serverless.deploy",
				"title": "Deploy service",
				"category": "Serverless",
				"icon": {
					"light": "resources/icons/light/cloud-upload.svg",
					"dark": "resources/icons/dark/cloud-upload.svg"
				}
			},
			{
				"command": "serverless.remove",
				"title": "Remove service",
				"category": "Serverless",
				"icon": {
					"light": "resources/icons/light/trash.svg",
					"dark": "resources/icons/dark/trash.svg"
				}
			},
			{
				"command": "serverless.openHandler",
				"title": "Open handler",
				"category": "Serverless"
			},
			{
				"command": "serverless.logs",
				"title": "Show logs",
				"category": "Serverless"
			},
			{
				"command": "serverless.resolve",
				"title": "Resolve",
				"category": "Serverless"
			},
			{
				"command": "serverless.deployFunction",
				"title": "Deploy function",
				"category": "Serverless",
				"icon": {
					"light": "resources/icons/light/function-upload.svg",
					"dark": "resources/icons/dark/function-upload.svg"
				}
			},
			{
				"command": "serverless.invoke",
				"title": "Invoke function",
				"category": "Serverless",
				"icon": {
					"light": "resources/icons/light/play.svg",
					"dark": "resources/icons/dark/play.svg"
				}
			},
			{
				"command": "serverless.invokeLocal",
				"title": "Invoke local",
				"category": "Serverless"
			},
			{
				"command": "cloudWatch.logs",
				"title": "Open log",
				"category": "CloudWatchLogs",
				"icon": {
					"light": "resources/icons/light/search.svg",
					"dark": "resources/icons/dark/search.svg"
				}
			}
		],
		"menus": {
			"view/title": [
				{
					"command": "serverless.refreshTreeHandler",
					"when": "view == serverlessOutline",
					"group": "navigation"
				}
			],
			"view/item/context": [
				{
					"command": "serverless.resolve",
					"when": "viewItem == container",
					"group": "Serverless@2"
				},
				{
					"command": "serverless.package",
					"when": "viewItem == container",
					"group": "Serverless@2"
				},
				{
					"command": "serverless.deploy",
					"when": "viewItem == container",
					"group": "Serverless@2"
				},
				{
					"command": "serverless.remove",
					"when": "viewItem == container",
					"group": "Serverless@2"
				},
				{
					"command": "serverless.deploy",
					"when": "viewItem == container",
					"group": "inline"
				},
				{
					"command": "serverless.openHandler",
					"when": "viewItem == function"
				},
				{
					"command": "serverless.logs",
					"when": "viewItem == function"
				},
				{
					"command": "serverless.deployFunction",
					"when": "viewItem == function"
				},
				{
					"command": "serverless.invoke",
					"when": "viewItem == function"
				},
				{
					"command": "serverless.invokeLocal",
					"when": "viewItem == function"
				},
				{
					"command": "serverless.deployFunction",
					"when": "viewItem == function",
					"group": "inline"
				},
				{
					"command": "serverless.invoke",
					"when": "viewItem == function",
					"group": "inline"
				},
				{
					"command": "cloudWatch.logs",
					"when": "viewItem == log_group",
					"group": "inline"
				},
				{
					"command": "cloudWatch.logs",
					"when": "viewItem == log_group"
				}
			],
			"explorer/context": [
				{
					"when": "filesExplorerFocus",
					"command": "serverless.package",
					"group": "Serverless@2"
				},
				{
					"when": "filesExplorerFocus",
					"command": "serverless.deploy",
					"group": "Serverless@1"
				},
				{
					"when": "filesExplorerFocus",
					"command": "serverless.remove",
					"group": "Serverless@1"
				}
			]
		},
		"configuration": {
			"type": "object",
			"title": "Serverless Command",
			"properties": {
				"serverlessCommand.firstCommand": {
					"type": "string",
					"default": "",
					"description": "Command setting that is additionally set before the serverless command"
				},
				"serverlessCommand.testFolderPath": {
					"type": "string",
					"default": "./test",
					"description": "Set the parent folder path of the <functionName>.json file referenced when executing `Invoke function`"
				},
				"serverlessCommand.aws.stage": {
					"type": "string",
					"default": "dev",
					"description": "Default stage for builds and deployments"
				},
				"serverlessCommand.aws.region": {
					"type": "string",
					"default": "ap-northeast-2",
					"description": "Default region for builds and deployments"
				},
				"serverlessCommand.aws.credentials": {
					"type": "string",
					"default": "",
					"description": "Setting When Using AWS Credential Profile Alias"
				},
				"serverlessCommand.aws.alias": {
					"type": "string",
					"default": "",
					"description": "Set AWS Alias Available to Lambda Functions"
				}
			}
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run build && npm run compile",
		"compile": "tsc -p tsconfig.extension.json",
		"watch": "tsc -watch -p tsconfig.extension.json",
		"package": "vsce package",
		"start": "react-scripts start",
		"build": "react-scripts build",
		"watch-build": "nodemon --watch src --ext js,css --exec \"npm run build\"",
		"test": "react-scripts test --env=jsdom",
		"eject": "react-scripts eject"
	},
	"dependencies": {
		"@aws-sdk/client-cloudwatch-logs": "^3.24.0",
		"js-yaml": "^4.1.0",
		"lodash": "^4.17.21"
	},
	"devDependencies": {
		"@fortawesome/fontawesome-svg-core": "^1.2.35",
		"@fortawesome/free-solid-svg-icons": "^5.15.3",
		"@fortawesome/react-fontawesome": "^0.1.15",
		"@types/js-yaml": "^4.0.2",
		"@types/lodash": "^4.14.172",
		"@types/node": "^12.20.15",
		"@types/vscode": "^1.58.1",
		"dayjs": "^1.10.6",
		"html-entities": "^2.3.2",
		"is-json": "^2.0.1",
		"json-format": "^1.0.1",
		"nodemon": "^2.0.12",
		"react": "^17.0.2",
		"react-dom": "^17.0.2",
		"react-router-dom": "^5.2.0",
		"regex-parser": "^2.2.11",
		"react-scripts": "4.0.3",
		"tslint": "^6.1.3",
		"typescript": "^4.3.5"
	},
	"browserslist": [
		">0.2%",
		"not dead",
		"not ie <= 11",
		"not op_mini all"
	]
}
